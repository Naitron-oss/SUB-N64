#!/usr/bin/env python
#/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
# *   Mupen64plus - configure                                               *
# *   Mupen64Plus homepage: http://code.google.com/p/mupen64plus/           *
# *   Copyright (C) 2009 DarkJeztr                                          *
# *                                                                         *
# *   This program is free software; you can redistribute it and/or modify  *
# *   it under the terms of the GNU General Public License as published by  *
# *   the Free Software Foundation; either version 2 of the License, or     *
# *   (at your option) any later version.                                   *
# *                                                                         *
# *   This program is distributed in the hope that it will be useful,       *
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
# *   GNU General Public License for more details.                          *
# *                                                                         *
# *   You should have received a copy of the GNU General Public License     *
# *   along with this program; if not, write to the                         *
# *   Free Software Foundation, Inc.,                                       *
# *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
# * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

import sys
import subprocess
from optparse import OptionParser, OptionGroup, OptionValueError

defaultFile = 'configure.gen'

defaultOpts = { 
#'BlightInput' : '1', 'Glide64' : '1', 
#'DummyAudio' : '1', 'DummyInput' : '1', 'GlN64' : '1', 'JttlAudio' : '1',
#'MupenInput' : '1', 'RiceVideo' : '1', 'RspHle' : '1',
'DBG_CORE':'0', 'DBG_COUNT':'0', 'DBG_COMPARE':'0', 'DBG_PROFILE':'0',
'DBG' : '0', 'DBGSYM' : '0', 'LIRC' : '1', 'Z64' : '1' , 'GUI' : 'GTK2',
'PREFIX' : '/usr/local', 'SHAREDIR' : '$(PREFIX)/share/mupen64plus',
'BINDIR' : '$(PREFIX)/bin', 'LIBDIR':'$(SHAREDIR)/plugins',
'MANDIR' : '$(PREFIX)/man/man1',
'CONFIGURE.GEN' : 'Included' }

defaultHeader = """# configure.gen
# File Auto-Generated by ./configure
# DO NOT MODIFY

"""

def checkDeps(config, options):
    """Checks dependancies, and disables options requiring unmet deps"""
    pkgTest = ShellTest(['which','pkg-config'],'pkg-config not installed')
    gtkTest = ShellTest(['pkg-config','gtk+-2.0'],'gtk+-2.0 not installed')
    sdlTest = ShellTest(['which','sdl-config'],'sdl not installed')
    z64Test = ShellTest()
    glewTest = ShellTest(['which','glewinfo'],'Glew not installed')
    ftglTest = ShellTest(['pkg-config','ftgl'],'Ftgl not installed')

    lircTest = ShellTest(['which','ircat'],'LIRC not installed')

    gtkTest.addDep(pkgTest)
    ftglTest.addDep(pkgTest)
    z64Test.addDep(glewTest)
    z64Test.addDep(ftglTest)

    # perform checks
    if(config['Z64']=='1') and not z64Test:
        config['Z64'] = '0'
        if(options.verbose):
            sys.stderr.write('Disabling Z64 Plugin: ')
            sys.stderr.write(z64Test.failedDep())
            sys.stderr.write('\n')
    
    if(config['LIRC']=='1') and not lircTest:
        config['LIRC'] = '0'
        if(options.verbose):
            sys.stderr.write('Disabling LIRC support: ')
            sys.stderr.write(lircTest.failedDep())
            sys.stderr.write('\n')

def printSettings(config):
    #print "\nCurrent Settings to write to", defaultFile
    print "Options:"
    if config['DBG']=='1': print "\tGraphical Debugger"
    if config['LIRC']=='1': print "\tLIRC Support"
    if config['DBGSYM']=='1': print "\tDebug symbols"
    if config['GUI']=='NONE': print "\tNo GUI"
    elif config['GUI']=='GTK2': print "\tGTK2 GUI"
    elif config['GUI']=='QT4': print "\tQT4 GUI"
    else:
        print "            BAD GUI OPTION"
    if config['DBG_CORE']=='1': print "\tR4300 debugging output"
    if config['DBG_COUNT']=='1': print "\tR4300 instruction count output"
    if config['DBG_COMPARE']=='1': print "\tR4300 core-synched debugging"
    if config['DBG_PROFILE']=='1': print "\tR4300 dynarec profiling output"
    
    print "Plugins:"
    if config['Z64']=='1': print "\tZ64"

    print "Directories:"
    print "  Install (PREFIX):  ", config['PREFIX']
    print "  Shared (SHAREDIR): ", config['SHAREDIR']
    print "  Binary (BINDIR):   ", config['BINDIR']
    print "  Plugins (LIBDIR):  ", config['LIBDIR']
    print "  Manual (MANDIR):   ", config['MANDIR']
    
def constructParser(config):
    parser = OptionParser()

    feat = OptionGroup(parser, 'Optional Features')
    feat.add_option('--enable-debuggui', help='add core debugger',
                                action='callback', callback=config.setOption )
    feat.add_option('--disable-debuggui', help='remove core debugger',
                                action='callback', callback=config.setOption )
    feat.add_option('--enable-lirc', help='add lirc support',
                                action='callback', callback=config.setOption )
    feat.add_option('--disable-lirc', help='remove lirc support',
                                action='callback', callback=config.setOption )
    feat.add_option('--with-nogui', help='build without GUI',
                                action='callback', callback=config.setOption )
    feat.add_option('--with-gtk2gui', help='build with GTK2 GUI',
                                action='callback', callback=config.setOption )
    feat.add_option('--with-qt4gui', help='build with QT4 GUI',
                                action='callback', callback=config.setOption )

    parser.add_option_group(feat)

    plugin = OptionGroup(parser, 'Plugins')
    plugin.add_option('--with-z64', help="enable Zilmar's lle rsp plugin",
                                action='callback', callback=config.setOption )
    plugin.add_option('--without-z64', help="disable Zilmar's lle rsp plugin",
                                action='callback', callback=config.setOption )

    parser.add_option_group(plugin)

    debug = OptionGroup(parser, 'Debugging Options')
    debug.add_option('--enable-debug', help='add debugging symbols', 
                                action='callback', callback=config.setOption )
    debug.add_option('--disable-debug', help='remove debugging symbols', 
                                action='callback', callback=config.setOption )
    debug.add_option('--enable-gprof', help='enable gprof profiling',
                                action='callback', callback=config.setOption )
    debug.add_option('--disable-gprof', help='disable gprof profiling',
                                action='callback', callback=config.setOption )
    debug.add_option('--enable-dbgcore', help='print r4300 debug printfs',
                                action='callback', callback=config.setOption )
    debug.add_option('--disable-dbgcore', help='disable r4300 debug printfs',
                                action='callback', callback=config.setOption )
    debug.add_option('--enable-corecount', 
                                help='print r4300 instruction count (64bit only)',
                                action='callback', callback=config.setOption )
    debug.add_option('--disable-corecount',
                                action='callback', callback=config.setOption )
    debug.add_option('--enable-corecomp', 
                                help='enable r4300 core synched debugging',
                                action='callback', callback=config.setOption )
    debug.add_option('--disable-corecomp', 
                                action='callback', callback=config.setOption )
    debug.add_option('--enable-profiling',  
                                help='dump r4300 dynarec profiling data',
                                action='callback', callback=config.setOption )
    debug.add_option('--disable-profiling',  
                                action='callback', callback=config.setOption )
    
    parser.add_option_group(debug)
    
    paths = OptionGroup(parser, 'Path Options')
    paths.add_option('--prefix-dir', metavar="DIR", nargs=1, type='string',
                                help='sets the prefix for install',
                                action='callback', callback=config.setOption )
    paths.add_option('--data-dir', metavar="DIR", nargs=1, type='string',
                                help='path to install shared data',
                                action='callback', callback=config.setOption )
    paths.add_option('--binary-dir', metavar="DIR", nargs=1, type='string',
                                help='path to install the binaries',
                                action='callback', callback=config.setOption )
    paths.add_option('--plugin-dir', metavar="DIR", nargs=1, type='string',
                                help='path to install the plugins',
                                action='callback', callback=config.setOption )
    paths.add_option('--man-dir', metavar="DIR", nargs=1, type='string',
                                help='path to the manual page',
                                action='callback', callback=config.setOption )
                                
    
    parser.add_option_group(paths)
    
    option = OptionGroup(parser, 'Configure Script Options')
    option.add_option('-q', '--quiet', help='suppress output', 
                                action='store_false', dest='verbose', default=True)
    option.add_option('-n', '--nosave', help='do not save changes',
                                action='store_false', dest='save', default=True)
    option.add_option('-f', '--force', help='ignore errors during read',
                                action='store_true', dest='force', default=False)
    option.add_option('-p', '--previous', help='load previous settings',
                                action='store_true', dest='previous', default=False)
    option.add_option('-d', '--no-deps', help='skip dependancy checks',
                                action='store_false', dest='checkdeps', default=True)
    
    parser.add_option_group(option)

    return parser


class ConfigFile(dict):
    """Handler for make-compatable config files"""
        
    def setOption(self, option, opt, value, parser):
        if opt == '--enable-debuggui':
            self['DBG']='1'
        elif opt == '--disable-debuggui':
            self['DBG']='0'
        elif opt == '--enable-lirc':
            self['LIRC']='1'
        elif opt == '--disable-lirc':
            self['LIRC']='0'
        elif opt == '--with-nogui':
            self['GUI']='NONE'
        elif opt == '--with-gtk2gui':
            self['GUI']='GTK2'
        elif opt == '--with-qt4gui':
            self['GUI']='QT4'
            
        #Handle plugin options
        elif opt == '--with-z64':
            self['Z64']='1'
        elif opt == '--without-z64':
            self['Z64']='0'

        #Handle debugging options
        elif opt == '--enable-debug':
            self['DBGSYM']='1'
        elif opt == '--disable-debug':
            self['DBGSYM']='0'
        elif opt == '--enable-gprof':
            self['PROFILE']='1'
        elif opt == '--disable-gprof':
            self['PROFILE']='0'
        elif opt == '--enable-dbgcore':
            self['DBG_CORE']='1'
        elif opt == '--disable-dbgcore':
            self['DBG_CORE']='0'
        elif opt == '--enable-corecount':
            self['DBG_COUNT']='1'
        elif opt == '--disable-corecount':
            self['DBG_COUNT']='0'
        elif opt == '--enable-corecomp':
            self['DBG_COMPARE']='1'
        elif opt == '--disable-corecomp':
            self['DBG_COMPARE']='0'
        elif opt == '--enable-profiling':
            self['DBG_PROFILE']='1'
        elif opt == '--disable-profiling':
            self['DBG_PROFILE']='0'
        
        #Handle path options
        elif opt == '--prefix-dir':
            self['PREFIX']=value
        elif opt == '--data-dir':
            self['SHAREDIR']=value
        elif opt == '--binary-dir':
            self['BINDIR']=value
        elif opt == '--plugin-dir':
            self['LIBDIR']=value
        elif opt == '--man-dir':
            self['MANDIR']=value

        #Handle option mismatches
        else:
            raise OptionValueError( ''.join('Invalid option: ', opt) )

    def initialize(self, defaultDict=defaultOpts):
        self.__loaderror = False
        self.clear()
        self.update( defaultDict )

    def load(self, fileName=defaultFile):
        FILE = None
        self.__loaderror = False
        try:
            FILE = open(fileName,'r')
            lineNum = 0
            for curLine in FILE:
                curLine = curLine.split('#')[0] #strip comments
                lineNum=lineNum+1
                if curLine.isspace() or len(curLine) < 1:
                    continue #increment counter and skip line if it's blank
                if (curLine.count('=') == 1):
                    curLineChunks = curLine.split('=')
                    if (len(curLineChunks[0]) == 0 
                            or curLineChunks[0].isspace()):
                        sys.stderr.write("ERROR: Blank key in {1} line: {0}\n"
                            .replace("{0}", str(lineNum)).replace('{1}',defaultFile) )
                        self.__loaderror = True
                    else:
                        self[curLineChunks[0].strip()]=curLineChunks[1].strip()
                else:
                    sys.stderr.write('ERROR: Bad assignment in {1} line: {0}\n'
                        .replace('{0}',str(lineNum)).replace('{1}',defaultFile) )
                    self.__loaderror = True
        finally:
            if(FILE <> None):
                FILE.close()
    
    def save(self, fileName=defaultFile, header=defaultHeader):
        try:
            FILE = open(fileName,'w+')
            FILE.writelines(header)
            for key in self:
                FILE.write(''.join([key ,' = ', self[key], '\n']))
        finally:
            if(FILE <> None):
                FILE.close()

    def getError(self):
        return self.__loaderror

    def __init__(self, fileName=defaultFile, defaultDict=defaultOpts):
        self.__loaderror = False
        self.initialize(defaultDict)
        try:
            self.load(fileName)
        except IOError:
            self.initialize(defaultDict)

class ShellTest:
    """Class to execute some shell command and store the results"""
    def __init__(self,cmdStr='pwd',msgStr=''):
        self.__message = msgStr
        self.__deps = []
        self.__command = cmdStr
        self.__checked = False
        self.__value = False
        
    def result(self):
        """Process dep to see if it passes or not, and does so recursively"""
        for dep in self.__deps:
            if not dep:
                return False
        if(self.__checked == False):
            #print ''.join(["Checking if ",self.message])
            self.__checked = True
            try:
                self.__value = (subprocess.call(self.__command,
                        stdout=subprocess.PIPE,stderr=subprocess.PIPE)) == 0
            except OSError:
                self.__value = False
        return self.__value
    
    def failedDep(self):
        """Returns string describing the reason this dep failed"""
        for dep in self.__deps:
            if not dep:
                return dep.failedDep()
        return self.__message

    def findDep(self, find):
        """Returns true if the dependancy 'find' is a dependancy of this dep"""
        if(self == find):
            return True
        for dep in self.__deps:
            if dep.findDep(find):
                return True
        return False
        
    def addDep(self, dep):
        self.__deps.append(dep)
        self.__checked = False
        assert(dep.findDep(self) == False) #avoid circular dependancy graphs

    def __nonzero__(self):
        return self.result()

def main():

    configChanges = ConfigFile('',[])
    parser = constructParser(configChanges)
    
    (options,args) = parser.parse_args() #get options and apply new settings to config

    if len(args) > 0:
        parser.error('try "./configure --help"')

    if(options.previous):
        config = ConfigFile()
    else:
        config = ConfigFile('')
        
    config.update(configChanges)

    if(options.checkdeps):
        checkDeps(config, options) #check that current settings are valid

    if(options.verbose):
        printSettings(config)
    
    if(options.save and (options.force or not config.getError()) ):
        if(options.verbose):
            print "\nSaving settings to:", defaultFile
        config.save()
    elif(config.getError()):
        print "NOT SAVING: Due to errors reading", defaultFile
        print "Use '--force' to override"


if __name__ == '__main__':
    main()